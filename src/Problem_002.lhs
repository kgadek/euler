\begin{code}
module Problem_002 where
\end{code}


Problem 2
=========


Task
----

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


Solution
--------

Don't like this solution... it is $O\left(\log n\right)$ which is OK... but I *know* I can do better.

\begin{code}
fibs :: Int -> Int -> Int -> [Int] -> [Int]
fibs prevprev prev n acc
  | curr < n  = fibs prev curr n (curr:acc)
  | otherwise = acc
  where curr = prevprev + prev

solution_one :: Int
solution_one = sum $ filter even $ fibs 0 1 4000000 []
\end{code}


Variations
----------

Here `fib` is taken from *A gentle introduction to Haskell. Isn't that cool?

\begin{code}
fib_gih :: [Int]
fib_gih = 1 : 1 : [ a+b | (a,b) <- zip fib_gih (tail fib_gih) ]
\end{code}

...and a slightly modified version. IMHO prettier.

\begin{code}
fib :: [Int]
fib = 1 : 1 : zipWith (+) fib (tail fib)
\end{code}

It seems that `fib` is most efficient (exact performance comparison to be done later).
Anyway, here's updated solution:

\begin{code}
solution_two :: Int
solution_two = sum $ takeWhile (<4000000) $ filter even fib
\end{code}


Optimal?
--------

Originally I made a mistake... The equation was simple:

$F_{n+6} = F_{n+5} + F_{n+4} = 3 F_{n+3} + 2 F_{n+2} = 3 F_{n+3} + F_{n+2} + F_{n+1} + F_n = 4 F_{n+3} + F_n$

But I didn't get to this (stupid typo...) and returned to the "good-enough" solution (`solution_one`).

\begin{code}
fib3 :: [Int]
fib3 = 2 : 8 : zipWith (\a b -> a + 4*b) fib3 (tail fib3)
\end{code}

So the code is even simpler and faster

\begin{code}
solution :: Int
solution = sum $ takeWhile (<4000000) fib3
\end{code}

Have I already said that all even Fibonacci sequence terms are $F_3, F_6, F_9, \ldots$ , haven't I? No?

**Proof**

$\qquad F_{3k} \equiv 0 \pmod{2}\,,\quad F_{3k+1} \equiv F_{3k+2} \equiv 1 \pmod{2}$ for $k=0$ (assuming $F_0 = 0$).

By induction on $k$, since $F_{3(k-1)} \equiv 0 \pmod{2}\,,\quad F_{3(k-1)+1} \equiv F_{3(k-1)+2} \equiv 1 \pmod{2}$ we get

$F_{3k} \equiv F_{3k-1}+F_{3k-2} \equiv 2 \equiv 0 \pmod{2}$  
$F_{3k+1} \equiv F_{3k}+F_{3k-1} \equiv 1 \pmod{2}$  
$F_{3k+2} \equiv F_{3k+1}+F_{3k} \equiv 1 \pmod{2}$

QED.